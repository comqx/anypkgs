name: anypkgs

on:
  push:
    branches:
    - master
    - main

env:
  APP_NAME: ospkgs
  DOCKER_REPO: devilf/ospkgs

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - version: 7.9.2009
          image: centos
          platform: linux/amd64,linux/arm64
        - version: 7.8.2003
          image: centos
          platform: linux/amd64
        - version: 7.7.1908
          image: centos
          platform: linux/amd64
        - version: 7.6.1810
          image: centos
          platform: linux/amd64
        - version: 7.5.1804
          image: centos
          platform: linux/amd64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Bildx
      uses: docker/setup-buildx-action@v1
    - name: Login to dockerhub
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKER_HUB_USERNAME}}
        password: ${{secrets.DOCKER_HUB_PASSWORD}}
    - name: Get version
      run: echo APP_VERSION=`git describe --tags --always` >> $GITHUB_ENV
    - name: Gen Dockerfile
      shell: bash
      run: |
        sed "s/OS_VERSION/${{matrix.version}}/g" build/template/Dockerfile.template-centos7 > Dockerfile.${{matrix.image}}-${{matrix.version}}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.${{matrix.image}}-${{matrix.version}}
        push: ${{github.event_name != 'pull_request'}}
        platforms: ${{matrix.platform}}
        # build-args: |
        #   APP_NAME=${{env.APP_NAME}}
        #   APP_VERSION=${{env.APP_VERSION}}
        tags: |
          devilf/os-${{matrix.image}}:${{matrix.version}}
    - name: Gen new dockerfile
      shell: bash
      run: |
        echo -e "FROM scratch\nCOPY --from=devilf/os-${{matrix.image}}:${{matrix.version}} / /" > Dockerfile.release.${{matrix.image}}-${{matrix.version}}
    - name: Build image to local
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.release.${{matrix.image}}-${{matrix.version}}
        platforms: ${{matrix.platform}}
        outputs: type=local,dest=./
    - name: Prepare for upload package
      shell: bash
      run: |
        ls -l
        platform=(amd64 arm64)
        for p in ${platform[@]};do
          if [ -d linux_${p}/centos ];then
            mv linux_${p}/centos centos
            tar -I pigz -cf os-${{matrix.image}}-${{matrix.version}}-${p}.tar.gz centos --remove-files
          elif [ -d centos ];then
            tar -I pigz -cf os-${{matrix.image}}-${{matrix.version}}-amd64.tar.gz centos --remove-files
          fi
        done
        if [ -f os-${{matrix.image}}-${{matrix.version}}-arm64.tar.gz ];then
          sha256sum os-${{matrix.image}}-${{matrix.version}}-{amd64,arm64}.tar.gz > os-${{matrix.image}}-${{matrix.version}}.sha256sum.txt
        else
          sha256sum os-${{matrix.image}}-${{matrix.version}}-amd64.tar.gz > os-${{matrix.image}}-${{matrix.version}}.sha256sum.txt
        fi
  tag_version:
    needs: build
    runs-on: ubuntu-20.04
    outputs:
      tagged: ${{ steps.check_tagged.outputs.tagged }}
      tag: ${{ steps.tag.outputs.new_tag }}
    steps:
    - name: Checkout dist branch
      uses: actions/checkout@v2
      with:
        ref: ${{ needs.build_and_push.outputs.branch }}
        fetch-depth: 0

    - name: Check tag exists
      id: check_tag
      uses: mukunku/tag-exists-action@v1.0.0
      with:
        tag: ${{ needs.build_and_push.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag version
      id: tag
      if: ${{ steps.check_tag.outputs.exists == 'false' }}
      uses: anothrNick/github-tag-action@1.34.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CUSTOM_TAG: ${{ needs.build_and_push.outputs.tag }}

    - name: ⚙️ Check created tag
      id: check_tagged
      run: |
        echo "::set-output name=tagged::${{ (steps.check_tag.outputs.exists == 'false') && (steps.tag.outputs.new_tag == steps.tag.outputs.tag) }}"
  create_release:
    needs: tag_version
    if: ${{ needs.tag_version.outputs.tagged == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Release and upload packages
      if: ${{ success() }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        fail_on_unmatched_files: false
        files: |
          os-${{matrix.image}}-${{matrix.version}}-amd64.tar.gz
          os-${{matrix.image}}-${{matrix.version}}-arm64.tar.gz
          os-${{matrix.image}}-${{matrix.version}}.sha256sum.txt
