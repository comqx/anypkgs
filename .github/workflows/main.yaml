name: anypkgs

on:
  push:
    branches:
    - master
    - main

permissions:
  contents: write

env:
  DOCKER_REPO: devilf/os-offline
  REPO_NAME: os-offline

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - version: 7.9.2009
          image: centos
          platform: linux/amd64,linux/arm64
          major_version: 7
        - version: 7.8.2003
          image: centos
          platform: linux/amd64
          major_version: 7
        - version: 7.7.1908
          image: centos
          platform: linux/amd64
          major_version: 7
        - version: 7.6.1810
          image: centos
          platform: linux/amd64
          major_version: 7
        - version: 7.5.1804
          image: centos
          platform: linux/amd64
          major_version: 7
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Bildx
      # 设置多架构
      uses: docker/setup-buildx-action@v2
    - name: Login to aliyun registry
      uses: docker/login-action@v2
      with:
        # registry: ${{secrets.REPO_ADDR}}
        username: ${{secrets.DOCKER_HUB_USERNAME}}
        password: ${{secrets.DOCKER_HUB_PASSWORD}}
    - name: Get version
      run: echo APP_VERSION=`git describe --tags --always` >> $GITHUB_ENV
    - name: Gen Dockerfile
      shell: bash
      run: |
        sed "s/OS_VERSION/${{matrix.version}}/g" build/Dockerfile.template-centos${{ matrix.major_version }}-os > Dockerfile.${{matrix.image}}-${{matrix.version}}-os
        sed "s/OS_VERSION/${{matrix.version}}/g" build/Dockerfile.template-centos${{ matrix.major_version }}-docker > Dockerfile.${{matrix.image}}-${{matrix.version}}-docker
    - name: Build image for os
      id: os_build
      # 多架构构建
      # https://github.com/docker/build-push-action
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.${{matrix.image}}-${{matrix.version}}-os
        push: true
        platforms: ${{matrix.platform}}
        build-args: |
          OS_MAIN_VERSION=${{ matrix.major_version }}
        tags: |
          ${{env.DOCKER_REPO}}:v${{matrix.version}}-${{matrix.image}}
    - name: Build image for docker
      id: docker_build
      # 多架构构建
      # https://github.com/docker/build-push-action
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.${{matrix.image}}-${{matrix.version}}-docker
        push: true
        platforms: ${{matrix.platform}}
        build-args: |
          OS_MAIN_VERSION=${{ matrix.major_version }}
        tags: |
          ${{env.DOCKER_REPO}}:v${{matrix.version}}-docker

        # - name: Gen new dockerfile
        #   shell: bash
        #   run: |
        #     echo -e "FROM scratch\nCOPY --from=devilf/os-${{matrix.image}}:${{matrix.version}} / /" > Dockerfile.release.${{matrix.image}}-${{matrix.version}}

        # - name: Build image to local
        #   # https://github.com/docker/build-push-action
        #   uses: docker/build-push-action@v4
        #   with:
        #     context: .
        #     file: Dockerfile.release.${{matrix.image}}-${{matrix.version}}
        #     platforms: ${{matrix.platform}}
        #     outputs: type=local,dest=./

        # - name: Prepare for upload package
        #   shell: bash
        #   run: |
        #     platform=(amd64 arm64)
        #     for p in ${platform[@]};do
        #       if [ -d linux_${p}/centos ];then
        #         mv linux_${p}/centos centos
        #         tar -I pigz -cf os-${{matrix.image}}-${{matrix.version}}-${p}.tar.gz centos --remove-files
        #       elif [ -d centos ];then
        #         tar -I pigz -cf os-${{matrix.image}}-${{matrix.version}}-amd64.tar.gz centos --remove-files
        #       fi
        #     done
        #     if [ -f os-${{matrix.image}}-${{matrix.version}}-arm64.tar.gz ];then
        #       sha256sum os-${{matrix.image}}-${{matrix.version}}-{amd64,arm64}.tar.gz > os-${{matrix.image}}-${{matrix.version}}.sha256sum.txt
        #     else
        #       sha256sum os-${{matrix.image}}-${{matrix.version}}-amd64.tar.gz > os-${{matrix.image}}-${{matrix.version}}.sha256sum.txt
        #     fi
  create_tag:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      tag: ${{ steps.tag.outputs.new_tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get version and tag info
      id: version
      # return value
      # https://github.com/ashley-taylor/read-json-property-action
      uses: ashley-taylor/read-json-property-action@v1.0
      with:
        path: ./.version.json
        property: version
    - name: Check tag exists
      id: check_tag
      # return exists, a string of 'true' or 'false'
      # https://github.com/mukunku/tag-exists-action
      uses: mukunku/tag-exists-action@v1.2.0
      with:
        tag: ${{ steps.version.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Tag version
      id: tag
      if: ${{ steps.check_tag.outputs.exists == 'false' }}
      # return new_tag and tag
      uses: anothrNick/github-tag-action@1.55.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CUSTOM_TAG: ${{ steps.version.outputs.value }}

  # publish_release:
  #   runs-on: ubuntu-latest
  #   needs: create_tag
  #   steps:
  #   - name: Prepare for upload package
  #     shell: bash
  #     run: |
  #       ls -l
  #       echo ${{ needs.create_tag.outputs.tag }}
  #       echo "xxxxxx" > test.txt
  #   - name: Release and upload packages
  #     # if: startsWith(github.ref, 'refs/tags/')
  #     # https://github.com/softprops/action-gh-release
  #     # uses: softprops/action-gh-release@v1
  #     uses: ncipollo/release-action@v1
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       tag: v1.0.1
  #       name: ${{ needs.create_tag.outputs.tag }}
  #       artifacts: "test.txt"
  #       replacesArtifacts: true
